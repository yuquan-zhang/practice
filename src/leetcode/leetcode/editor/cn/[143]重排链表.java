package leetcode.leetcode.editor.cn;
//ÁªôÂÆö‰∏Ä‰∏™ÂçïÈìæË°® LÔºöL0‚ÜíL1‚Üí‚Ä¶‚ÜíLn-1‚ÜíLn Ôºå
//Â∞ÜÂÖ∂ÈáçÊñ∞ÊéíÂàóÂêéÂèò‰∏∫Ôºö L0‚ÜíLn‚ÜíL1‚ÜíLn-1‚ÜíL2‚ÜíLn-2‚Üí‚Ä¶ 
//
// ‰Ω†‰∏çËÉΩÂè™ÊòØÂçïÁ∫ØÁöÑÊîπÂèòËäÇÁÇπÂÜÖÈÉ®ÁöÑÂÄºÔºåËÄåÊòØÈúÄË¶ÅÂÆûÈôÖÁöÑËøõË°åËäÇÁÇπ‰∫§Êç¢„ÄÇ 
//
// Á§∫‰æã 1: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->4->2->3. 
//
// Á§∫‰æã 2: 
//
// ÁªôÂÆöÈìæË°® 1->2->3->4->5, ÈáçÊñ∞ÊéíÂàó‰∏∫ 1->5->2->4->3. 
// Related Topics ÈìæË°® 
// üëç 596 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)

import java.util.List;
import java.util.Stack;

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution143 {
    public void reorderList(ListNode head) {
        if (head == null) return;
        Stack<ListNode> stack = new Stack<>();
        ListNode tn = head;
        while (tn != null) {
            stack.push(tn);
            tn = tn.next;
        }
        tn = head;
        while (!tn.equals(stack.peek()) && !stack.peek().equals(tn.next)) {
            ListNode next = tn.next;
            tn.next = stack.pop();
            tn.next.next = next;
            tn = next;
        }
        if (tn.equals(stack.peek())) {
            tn.next = null;
        } else {
            tn.next.next = null;
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
